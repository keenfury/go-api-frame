package {{.AllLower}}

import (
	"encoding/json"
	"fmt"
	"testing"{{.ManagerImportTest}}

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"gopkg.in/guregu/null.v3"
)

func TestManager{{.Camel}}_Get(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.Camel}} := NewMockData{{.Camel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.Abbr}} *{{.Camel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerGetTestRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.Camel}}{data{{.Camel}}: mockData{{.Camel}}}
			err := m.Get(tt.{{.Abbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.Camel}}.Get().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.Camel}}.Get().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.Camel}}_Post(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.Camel}} := NewMockData{{.Camel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.Abbr}}     *{{.Camel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerPostTestRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.Camel}}{data{{.Camel}}: mockData{{.Camel}}}
			err := m.Post(tt.{{.Abbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.Camel}}.Create().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.Camel}}.Create().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.Camel}}_Put(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.Camel}} := NewMockData{{.Camel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.Abbr}}     *{{.Camel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerPutTestRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.Camel}}{data{{.Camel}}: mockData{{.Camel}}}
			err := m.Put(tt.{{.Abbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.Camel}}.Update().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.Camel}}.Update().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.Camel}}_Patch(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.Camel}} := NewMockData{{.Camel}}Adapter(ctrl)

	tests := []struct {
		name    string
		body    []byte
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			[]byte(`{"Id": 1}`),
			false,
			[]*gomock.Call{
				mockData{{.Camel}}.EXPECT().Read(gomock.Any()).Return(nil),
				mockData{{.Camel}}.EXPECT().Update(gomock.Any()).Return(nil),
			},
		},
		{
			"invalid id",
			[]byte(`{"Id": 1}`),
			true,
			[]*gomock.Call{
				mockData{{.Camel}}.EXPECT().Read(gomock.Any()).Return(fmt.Errorf("missing record")),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.Camel}}{data{{.Camel}}: mockData{{.Camel}}}
			err := m.Patch(tt.body)
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.Camel}}.Update().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.Camel}}.Update().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.Camel}}_Delete(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.Camel}} := NewMockData{{.Camel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.Abbr}}     *{{.Camel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerDeleteTestRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.Camel}}{data{{.Camel}}: mockData{{.Camel}}}
			err := m.Delete(tt.{{.Abbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.Camel}}.Delete().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.Camel}}.Delete().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestValidJson(t *testing.T) {
	tests := []struct {
		name      string
		jsonValue json.RawMessage
		want      bool
	}{
		{
			"successful",
			[]byte(`{"test": "again"}`),
			true,
		},
		{
			"failed",
			[]byte(`{"test": again"}`),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := ValidJson(tt.jsonValue)
			assert.Equal(t, tt.want, got, "ValidJson.%s => expected %t; got %t", tt.name, tt.want, got)
		})
	}
}
