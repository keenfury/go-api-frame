package {{.AllLower}}

import (
	"io/ioutil"
	"net/http"{{.HandlerStrConv}}

	"github.com/labstack/echo/v4"

	ae "{{.ProjectPath}}/internal/api_error"
	s "{{.ProjectPath}}/internal/shared"
)

type (
	Manager{{.Camel}}Adapter interface {
		Get(*{{.Camel}}) error
		List(*[]{{.Camel}}) error
		Post(*{{.Camel}}) error
		Put(*{{.Camel}}) error
		Patch([]byte) error
		Delete(*{{.Camel}}) error
	}

	Handler{{.Camel}} struct {
		manager{{.Camel}} Manager{{.Camel}}Adapter
	}
)

func NewHandler{{.Camel}}(m{{.Abbr}} Manager{{.Camel}}Adapter) *Handler{{.Camel}} {
	return &Handler{{.Camel}}{manager{{.Camel}}: m{{.Abbr}}}
}

func (h *Handler{{.Camel}}) Load{{.Camel}}Routes(eg *echo.Group) {
	eg.GET("/{{.AllLower}}/{{.HandlerGetDeleteUrl}}", h.Get)
	eg.GET("/{{.AllLower}}/list", h.List)
	eg.POST("/{{.AllLower}}", h.Post)
	eg.PUT("/{{.AllLower}}", h.Put)
	eg.PATCH("/{{.AllLower}}", h.Patch)
	eg.DELETE("/{{.AllLower}}/{{.HandlerGetDeleteUrl}}", h.Delete)
}

func (h *Handler{{.Camel}}) Get(c echo.Context) error {
{{.HandlerGetDeleteAssign}}
	{{.LowerCamel}} := &{{.Camel}}{ {{.HandlerArgSet}} }
	if err := h.manager{{.Camel}}.Get({{.LowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(*{{.LowerCamel}}, nil))
}

func (h *Handler{{.Camel}}) List(c echo.Context) error {
	{{.LowerCamel}}s := &[]{{.Camel}}{}
	if err := h.manager{{.Camel}}.List({{.LowerCamel}}s); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(*{{.LowerCamel}}s, nil))
}

func (h *Handler{{.Camel}}) Post(c echo.Context) error {
	{{.Abbr}} := &{{.Camel}}{}
	if err := c.Bind({{.Abbr}}); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, s.NewOutput(bindErr.BodyError(), &bindErr))
	}
	if err := h.manager{{.Camel}}.Post({{.Abbr}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(*{{.Abbr}}, nil))
}

func (h *Handler{{.Camel}}) Put(c echo.Context) error {
	{{.Abbr}} := &{{.Camel}}{}
	if err := c.Bind({{.Abbr}}); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, s.NewOutput(bindErr.BodyError(), &bindErr))
	}
	if err := h.manager{{.Camel}}.Put({{.Abbr}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(*{{.Abbr}}, nil))
}

func (h *Handler{{.Camel}}) Patch(c echo.Context) error {
	body, _ := ioutil.ReadAll(c.Request().Body)
	if err := h.manager{{.Camel}}.Patch(body); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(struct{}{}, nil))
}

func (h *Handler{{.Camel}}) Delete(c echo.Context) error {
{{.HandlerGetDeleteAssign}}
	{{.LowerCamel}} := &{{.Camel}}{ {{.HandlerArgSet}} }
	if err := h.manager{{.Camel}}.Delete({{.LowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, s.NewOutput(nil, &apiError))
	}
	return c.JSON(http.StatusOK, s.NewOutput(struct{}{}, nil))
}
