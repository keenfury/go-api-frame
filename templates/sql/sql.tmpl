package {{.Lower}}

import (
	"github.com/jmoiron/sqlx"

	ae "{{.ProjectPath}}/internal/api_error"
	stor "{{.ProjectPath}}/internal/storage"
)

type (
	SQL{{.Camel}} struct {
		DB *sqlx.DB
	}
)

func InitSQL() *SQL{{.Camel}} {
	return &SQL{{.Camel}}{DB: stor.{{.SQLProvider}}DB}
}

func (d *SQL{{.Camel}}) Get({{.Abbr}} *{{.Camel}}) error {
	sqlGet := {{.DataTablePrefix}}`
		select
			{{.SqlGetColumns}}
		from {{.DataTable}} where {{.SqlTableKeyKeys}}`{{.DataTablePostfix}}
	if errDB := d.DB.Get({{.Abbr}}, sqlGet, {{.SqlTableKeyValues}}); errDB != nil {
		return ae.DBError("{{.Camel}} Get: unable to get record.", errDB)
	}
	return nil
}

func (d *SQL{{.Camel}}) List({{.Abbr}} *[]{{.Camel}}) error {
	sqlList := {{.DataTablePrefix}}`
		select
			{{.SqlGetColumns}}
		from {{.DataTable}} order by {{.SqlTableKeyListOrder}}`{{.DataTablePostfix}}
	if errDB := d.DB.Select({{.Abbr}}, sqlList); errDB != nil {
		return ae.DBError("{{.Camel}} List: unable to select records.", errDB)
	}
	return nil
}

func (d *SQL{{.Camel}}) Post({{.Abbr}} *{{.Camel}}) error {
	sqlPost := {{.DataTablePrefix}}`
		insert into {{.DataTable}} (
			{{.SqlPostColumns}}
		) values (
			{{.SqlPostColumnsNamed}}
		){{.SqlPostReturning}}`{{.DataTablePostfix}}
	rows, errDB := d.DB.NamedQuery(sqlPost, {{.Abbr}})
	if errDB != nil {
		return ae.DBError("{{.Camel}} Post: unable to insert record.", errDB)
	}
	defer rows.Close()
	{{.SqlPostLastId}}
	return nil
}

func (d *SQL{{.Camel}}) Put({{.Abbr}} *{{.Camel}}) error {
	sqlPut := {{.DataTablePrefix}}`
		update {{.DataTable}} set
			{{.SqlPutColumns}}
		where {{.SqlPutWhere}}`{{.DataTablePostfix}}
	if _, errDB := d.DB.NamedExec(sqlPut, {{.Abbr}}); errDB != nil {
		return ae.DBError("{{.Camel}} Put: unable to update record.", errDB)
	}
	return nil
}

func (d *SQL{{.Camel}}) Delete({{.Abbr}} *{{.Camel}}) error {
	sqlDelete := {{.DataTablePrefix}}`
		delete from {{.DataTable}} where {{.SqlTableKeyKeys}}`{{.DataTablePostfix}}
	if _, errDB := d.DB.Exec(sqlDelete, {{.SqlTableKeyValues}}); errDB != nil {
		return ae.DBError("{{.Camel}} Delete: unable to delete record.", errDB)
	}
	return nil
}
